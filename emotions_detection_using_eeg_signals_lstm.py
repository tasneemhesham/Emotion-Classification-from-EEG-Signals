# -*- coding: utf-8 -*-
"""emotions_detection_using_eeg_signals_lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szeGYFInR-mx96hFjt0auPLY7xGD_3o6

# **Libraries**
"""

import warnings
import numpy as np
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import random

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.layers import Dense, Flatten, LSTM, Input, Dropout
from tensorflow.keras.optimizers import Adam

warnings.filterwarnings('ignore')

"""# **Loading data**"""

df = pd.read_csv('emotions.csv')

df.head()

label_mapping = {'NEGATIVE': 0, 'NEUTRAL': 1, 'POSITIVE': 2}
df['label'] = df['label'].map(label_mapping)

"""# **Data Visualization**"""

emotion_counts = df['label'].value_counts()
emotional_labels = {0: 'NEGATIVE', 1: 'NEUTRAL', 2: 'POSITIVE'}
emotion_labels = [emotional_labels[label] for label in emotion_counts.index]

plt.figure(figsize=(8, 8))
plt.pie(emotion_counts, labels=emotion_labels, autopct='%1.1f%%', startangle=140, colors=['red', 'yellow', 'green'])
plt.title("Distribution of Emotions (0: NEGATIVE, 1: NEUTRAL, 2: POSITIVE)")
plt.axis('equal')
plt.show()

sample = df.loc[0, 'fft_0_b':'fft_749_b']
plt.figure(figsize=(16, 10))
plt.plot(range(len(sample)), sample)
plt.title("EEG Time-Series df")
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.show()

"""# **Standardization**"""

scaler = StandardScaler()
df.iloc[:, :-1] = scaler.fit_transform(df.iloc[:, :-1])

"""# **Data Splitting**"""

X = df.drop('label', axis=1)
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

X_train = np.array(X_train).reshape((X_train.shape[0],X_train.shape[1],1))
X_test = np.array(X_test).reshape((X_test.shape[0], X_test.shape[1],1))

"""# **Model Building and Evaluation**"""

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_train.shape[1], 1)),
    tf.keras.layers.LSTM(256, return_sequences=True),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, y_train, validation_split=0.2, epochs=20, batch_size=64, verbose=2)

score = model.evaluate(X_test, y_test)
print(f'Test accuracy: {score[1] * 100:.2f}%')

y_pred = np.argmax(model.predict(X_test), axis=-1)

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 8))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False, xticklabels=label_mapping.keys(), yticklabels=label_mapping.keys())
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

clr = classification_report(y_test, y_pred, target_names=label_mapping.keys())
print("Classification Report:\n", clr)

emotion_labels = {0: 'NEGATIVE', 1: 'NEUTRAL', 2: 'POSITIVE'}

for i in range(6, 8):
    random_index = random.randint(0, len(X_test) - 1)

    true_label = y_test.iloc[random_index]
    true_emotion = emotion_labels.get(true_label, 'Unknown')

    sample_input = X_test[random_index].reshape(1, X_test.shape[1], 1)

    predicted_emotion = model.predict(sample_input, verbose=0)
    predicted_label = emotion_labels[np.argmax(predicted_emotion)]

    print(f"Sample {i}: Real Emotion Label: {true_emotion}, Predicted Emotion Label: {predicted_label}")